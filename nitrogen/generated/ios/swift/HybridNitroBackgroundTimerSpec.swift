///
/// HybridNitroBackgroundTimerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroBackgroundTimerSpec``
public protocol HybridNitroBackgroundTimerSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func setTimeout(id: Double, duration: Double, callback: @escaping (_ nativeId: Double) -> Void) throws -> Double
  func clearTimeout(id: Double) throws -> Void
  func setInterval(id: Double, interval: Double, callback: @escaping (_ nativeId: Double) -> Void) throws -> Double
  func clearInterval(id: Double) throws -> Void
}

/// See ``HybridNitroBackgroundTimerSpec``
public class HybridNitroBackgroundTimerSpec_base {
  private weak var cxxWrapper: HybridNitroBackgroundTimerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroBackgroundTimerSpec_cxx {
  #if DEBUG
    guard self is HybridNitroBackgroundTimerSpec else {
      fatalError("`self` is not a `HybridNitroBackgroundTimerSpec`! Did you accidentally inherit from `HybridNitroBackgroundTimerSpec_base` instead of `HybridNitroBackgroundTimerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroBackgroundTimerSpec_cxx(self as! HybridNitroBackgroundTimerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroBackgroundTimer HybridObject.
 * Implement this protocol to create Swift-based instances of NitroBackgroundTimer.
 * ```swift
 * class HybridNitroBackgroundTimer : HybridNitroBackgroundTimerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroBackgroundTimerSpec = HybridNitroBackgroundTimerSpec_protocol & HybridNitroBackgroundTimerSpec_base
