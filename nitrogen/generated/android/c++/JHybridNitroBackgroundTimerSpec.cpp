///
/// JHybridNitroBackgroundTimerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroBackgroundTimerSpec.hpp"



#include <functional>
#include "JFunc_void_double.hpp"

namespace margelo::nitro::nitrobackgroundtimer {

  jni::local_ref<JHybridNitroBackgroundTimerSpec::jhybriddata> JHybridNitroBackgroundTimerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroBackgroundTimerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroBackgroundTimerSpec::initHybrid),
    });
  }

  size_t JHybridNitroBackgroundTimerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridNitroBackgroundTimerSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  double JHybridNitroBackgroundTimerSpec::setTimeout(double id, double duration, const std::function<void(double /* nativeId */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<double(double /* id */, double /* duration */, jni::alias_ref<JFunc_void_double::javaobject> /* callback */)>("setTimeout_cxx");
    auto __result = method(_javaPart, id, duration, JFunc_void_double_cxx::fromCpp(callback));
    return __result;
  }
  void JHybridNitroBackgroundTimerSpec::clearTimeout(double id) {
    static const auto method = javaClassStatic()->getMethod<void(double /* id */)>("clearTimeout");
    method(_javaPart, id);
  }
  double JHybridNitroBackgroundTimerSpec::setInterval(double id, double interval, const std::function<void(double /* nativeId */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<double(double /* id */, double /* interval */, jni::alias_ref<JFunc_void_double::javaobject> /* callback */)>("setInterval_cxx");
    auto __result = method(_javaPart, id, interval, JFunc_void_double_cxx::fromCpp(callback));
    return __result;
  }
  void JHybridNitroBackgroundTimerSpec::clearInterval(double id) {
    static const auto method = javaClassStatic()->getMethod<void(double /* id */)>("clearInterval");
    method(_javaPart, id);
  }

} // namespace margelo::nitro::nitrobackgroundtimer
